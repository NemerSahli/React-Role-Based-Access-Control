{"version":3,"sources":["BrowserHistory/history.js","components/Authorization.js","components/pages/Landing.js","components/pages/UserDashboard.js","components/pages/AdminDashboard.js","components/pages/SupAdDashboard.js","components/pages/OrgDashboard.js","components/layout/Header.js","components/pages/Login.js","components/layout/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Authorization","WrappedComponent","allowedRoles","userType","_React$Component","WithAuthorization","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","includes","react_default","a","createElement","props","map","dashboard","React","Component","Landing","UserDashboard","AdminDashboard","SupAdDashboard","OrgDashboard","Header","react_router_dom","to","Login","onClick","selectUserTypeHandler","bind","className","NotFoundPage","App","state","supAdminAuthDashboards","adminAuthDashboards","orgAuthDashboards","userAuthDashboards","selectUserType","_this","setState","_this$state","history","Login_Login","Header_Header","react_router","path","component","exact","toConsumableArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eacff84.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();\n","import React from 'react';\n\nconst Authorization = (WrappedComponent, allowedRoles, userType) => {\n  return class WithAuthorization extends React.Component {\n    render() {\n      if (allowedRoles.includes(userType)) {\n        return <WrappedComponent {...this.props} />;\n      } else {\n        return (\n          <div>\n            <h3>\n              This user type \"{userType}\" not allowed to view the dashboard\n              page/s of: \"\n            </h3>\n            {allowedRoles.map(dashboard => {\n              return <h2>-{dashboard}</h2>;\n            })}\n          </div>\n        );\n      }\n    }\n  };\n};\n\nexport default Authorization;\n","import React, { Component } from 'react'\n\nexport default class Landing extends Component {\n render() {\n  return (\n   <div>\n    <h1>Landing page</h1>\n   </div>\n  )\n }\n}\n","import React, { Component } from 'react';\n\nexport default class UserDashboard extends Component {\n  render() {\n    return (\n      <div>\n        <h1>User Dashboard</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class AdminDashboard extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Admin Dashboard</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class SupAdDashboard extends Component {\n  render() {\n    return <h1>Super Admin Dashboard</h1>;\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class OrgDashboard extends Component {\n  render() {\n    return <h1>Organizer Dashboard</h1>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nexport default class Header extends Component {\n  render() {\n    return (\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <li>\n              <Link to=\"/SuperAdmin/dashboard\"> Super Admin</Link>\n            </li>\n            <Link to=\"/admin/dashboard\">Admin </Link>\n          </li>\n          <li>\n            <Link to=\"/org/dashboard\">Organizer</Link>\n          </li>\n          <li>\n            <Link to=\"/user/dashboard\">User</Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Login extends Component {\n  render() {\n    return (\n      <div>\n        <h3>Please select a user type as login:</h3>\n        <button onClick={this.props.selectUserTypeHandler.bind(this,'SuperAdmin')} className=\"user-type-button\">Super Admin</button>\n        <button onClick={this.props.selectUserTypeHandler.bind(this,'Admin')} className=\"user-type-button\">Admin</button>\n        <button onClick={this.props.selectUserTypeHandler.bind(this,'Organizer')} className=\"user-type-button\">Organizer</button>\n        <button onClick={this.props.selectUserTypeHandler.bind(this,'User')} className=\"user-type-button\">User</button>\n      </div>\n    );\n  }\n}\n","import React from 'react'\n\nexport default function NotFoundPage() {\n return (\n  <div>\n   <h1>404 page not found</h1>\n  </div>\n )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport history from './BrowserHistory/history';\n\nimport Authorization from './components/Authorization';\nimport Landing from './components/pages/Landing';\nimport UserDashboard from './components/pages/UserDashboard';\nimport AdminDashboard from './components/pages/AdminDashboard';\nimport SupAdDashboard from './components/pages/SupAdDashboard';\nimport OrgDashboard from './components/pages/OrgDashboard';\nimport Header from './components/layout/Header';\nimport Login from './components/pages/Login';\nimport NotFoundPage from './components/layout/NotFoundPage';\n\nclass App extends Component {\n  state = {\n    userType: 'none',\n    supAdminAuthDashboards: ['SuperAdmin'],\n    adminAuthDashboards: ['SuperAdmin', 'Admin'],\n    orgAuthDashboards: ['SuperAdmin', 'Admin', 'Organizer'],\n    userAuthDashboards: ['SuperAdmin', 'Admin', 'Organizer', 'User']\n  };\n  selectUserType = userType => {\n    this.setState({\n      userType: userType\n    });\n  };\n\n  render() {\n    const {\n      userType,\n      supAdminAuthDashboards,\n      adminAuthDashboards,\n      orgAuthDashboards,\n      userAuthDashboards\n    } = this.state;\n    return (\n      <div className=\"App\">\n        {/* write your comment here... */}\n        <div className=\"container\">\n          <BrowserRouter history={history}>\n            <Login selectUserTypeHandler={this.selectUserType} />\n            <h3>LoggedIn user Type: {this.state.userType}</h3>\n            <hr />\n            <h3>Please select one of the following dashboard to check if you are authorized:-</h3>\n\n            <Header userType={''} />\n            <Switch>\n              <Route path=\"/\" component={Landing} exact />\n              <Route\n                path=\"/SuperAdmin/dashboard\"\n                component={Authorization(\n                  SupAdDashboard,\n                  [...supAdminAuthDashboards],\n                  userType\n                )}\n              />\n              <Route\n                path=\"/admin/dashboard\"\n                component={Authorization(\n                  AdminDashboard,\n                  [...adminAuthDashboards],\n                  userType\n                )}\n              />\n              <Route\n                path=\"/org/dashboard\"\n                component={Authorization(\n                  OrgDashboard,\n                  [...orgAuthDashboards],\n                  userType\n                )}\n              />\n              <Route\n                path=\"/user/dashboard\"\n                component={Authorization(\n                  UserDashboard,\n                  [...userAuthDashboards],\n                  userType\n                )}\n              />\n              <Route path=\"\" component={NotFoundPage} />\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}